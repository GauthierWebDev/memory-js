{"version":3,"file":"index.js","mappings":"qBA2EAA,EAAOC,QA3EQ,CACb,CACEC,KAAM,YACNC,WAAY,GAEd,CACED,KAAM,UACNC,YAAa,KAEf,CACED,KAAM,SACNC,YAAa,KAEf,CACED,KAAM,OACNC,YAAa,KAEf,CACED,KAAM,cACNC,YAAa,KAEf,CACED,KAAM,UACNC,YAAa,KAEf,CACED,KAAM,QACNC,YAAa,KAEf,CACED,KAAM,aACNC,YAAa,KAEf,CACED,KAAM,cACNC,YAAa,KAEf,CACED,KAAM,QACNC,YAAa,KAEf,CACED,KAAM,QACNC,YAAa,KAEf,CACED,KAAM,aACNC,YAAa,MAEf,CACED,KAAM,OACNC,YAAa,MAEf,CACED,KAAM,OACNC,YAAa,MAEf,CACED,KAAM,eACNC,YAAa,MAEf,CACED,KAAM,YACNC,YAAa,MAEf,CACED,KAAM,QACNC,YAAa,MAEf,CACED,KAAM,kBACNC,YAAa,Q,cCvEjB,MAAMC,EAAc,EAAQ,KACtBC,EAAmB,EAAQ,KAE3BC,EAAa,EAAQ,KAuE3BN,EAAOC,QArEP,MACCM,cACCC,KAAKC,OAAS,GACZD,KAAKE,WAAa,KAMrBC,UAECH,KAAKE,WAAa,IAAIL,EAAiBG,KAAKC,QAG5CD,KAAKE,WAAWE,IAAIC,oBAGpBL,KAAKE,WAAWE,IAAIE,cAElBC,YAAW,KAETP,KAAKE,WAAWM,cAGhBR,KAAKE,WAAWE,IAAIK,kBAGpBT,KAAKE,WAAWE,IAAIM,gBACnB,KAONC,iBAGCb,EAAWc,SAASC,IAChBb,KAAKC,OAAOa,KAAK,IAAIlB,EAAYiB,EAAMnB,KAAMmB,EAAMlB,gBASxDoB,cAE6BC,SAASC,eAAe,YAGhCC,iBAAiB,SAAS,IAAMlB,KAAKG,YAM1DgB,OAGCnB,KAAKe,cAGLf,KAAKW,oB,OCjDPnB,EAAOC,QArBP,MACCM,YAAYc,GACXb,KAAKoB,WAAa,KAClBpB,KAAKqB,OAAQ,EACbrB,KAAKsB,SAAU,EACftB,KAAKa,MAAQA,EAGdU,eAAeC,EAAUC,GAExBzB,KAAKoB,WAAaJ,SAASU,WAAWF,EAASG,SAAS,GAAMC,cAAc,MAI5E5B,KAAKoB,WAAWS,MAAMC,YAAY,eAAgB,GAAG9B,KAAKa,MAAMlB,gBAGhE8B,EAAMM,OAAO/B,KAAKoB,e,QCTpB5B,EAAOC,QARP,MACCM,YAAYL,EAAMC,GACjBK,KAAKN,KAAOA,EACZM,KAAKL,WAAaA,EAClBK,KAAKqB,OAAQ,K,cCJf,MAAMW,EAAa,EAAQ,IACrBC,EAAY,EAAQ,KAyC1BzC,EAAOC,QArCP,MACEM,YAAYE,GACVD,KAAKkC,cAAgB,GACvBlC,KAAKmC,cAAgB,IACrBnC,KAAKoC,kBAAoB,IACzBpC,KAAKC,OAASA,EAAOoC,UAAUC,MAAM,EAAGtC,KAAKkC,eAC3ClC,KAAKuC,MAAQ,GACfvC,KAAKI,IAAM,IAAI6B,EAMhBzB,cAQC,IAAIR,KAAKC,UAAWD,KAAKC,QAAQoC,UAAUzB,SAAQC,IAGlD,MAAM2B,EAAU,IAAIR,EAAWnB,GAI/B2B,EAAQjB,eAAevB,KAAKI,IAAIqC,aAAczC,KAAKI,IAAIsC,gBAIvD1C,KAAKuC,MAAMzB,KAAK0B,S,QCOnBhD,EAAOC,QA5CP,MACEM,cAEEC,KAAKyC,aAAezB,SAASC,eAAe,QAG5CjB,KAAK0C,eAAiB1B,SAASC,eAAe,SAGhDjB,KAAK2C,qBAAuB3B,SAASC,eAAe,eAMrDR,kBACCT,KAAK2C,qBAAqBC,UAAUC,IAAI,uBAOvCxC,oBACDL,KAAK2C,qBAAqBC,UAAUC,IAAI,uBAOzCvC,cACCN,KAAK0C,eAAeE,UAAUC,IAAI,iBAOnCnC,cACCV,KAAK0C,eAAeE,UAAUE,OAAO,oB,SChCtCC,MAAMC,UAAUX,QAAU,WAE1B,IAMIY,EANAC,EAAQH,MAAMI,KAAKnD,MAGnBoD,EAAeF,EAAMG,OAMzB,KAAwB,IAAjBD,GAENH,EAAcK,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCA,KAICF,EAAME,GAAeF,EAAMD,IAAgB,CAACC,EAAMD,GAAcC,EAAME,IAIxE,OAAOF,KC/BJO,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAanE,QAGrB,IAAID,EAASiE,EAAyBE,GAAY,CAGjDlE,QAAS,IAOV,OAHAqE,EAAoBH,GAAUnE,EAAQA,EAAOC,QAASiE,GAG/ClE,EAAOC,Q,MCrBf,EAAQ,KACR,MAAMsE,EAAS,EAAQ,KAGvB/C,SAASE,iBAAiB,oBAAoB,MAC9B,IAAI6C,GACZ5C,W","sources":["webpack://memory-js/./src/data/fruits.js","webpack://memory-js/./src/js/Memory.js","webpack://memory-js/./src/js/MemoryCard.js","webpack://memory-js/./src/js/MemoryFruit.js","webpack://memory-js/./src/js/MemoryGameEngine.js","webpack://memory-js/./src/js/MemoryHUD.js","webpack://memory-js/./src/js/arrayShuffle.js","webpack://memory-js/webpack/bootstrap","webpack://memory-js/./src/js/index.js"],"sourcesContent":["const fruits = [\r\n  {\r\n    name: 'red-apple',\r\n    translateY: 0,\r\n  },\r\n  {\r\n    name: 'bananas',\r\n    translateY: -100,\r\n  },\r\n  {\r\n    name: 'orange',\r\n    translateY: -200,\r\n  },\r\n  {\r\n    name: 'lime',\r\n    translateY: -300,\r\n  },\r\n  {\r\n    name: 'pomegranate',\r\n    translateY: -400,\r\n  },\r\n  {\r\n    name: 'apricot',\r\n    translateY: -500,\r\n  },\r\n  {\r\n    name: 'lemon',\r\n    translateY: -600,\r\n  },\r\n  {\r\n    name: 'strawberry',\r\n    translateY: -700,\r\n  },\r\n  {\r\n    name: 'green-apple',\r\n    translateY: -800,\r\n  },\r\n  {\r\n    name: 'peach',\r\n    translateY: -900,\r\n  },\r\n  {\r\n    name: 'grape',\r\n    translateY: -1000,\r\n  },\r\n  {\r\n    name: 'watermelon',\r\n    translateY: -1100,\r\n  },\r\n  {\r\n    name: 'plum',\r\n    translateY: -1200,\r\n  },\r\n  {\r\n    name: 'pear',\r\n    translateY: -1300,\r\n  },\r\n  {\r\n    name: 'red-cherries',\r\n    translateY: -1400,\r\n  },\r\n  {\r\n    name: 'raspberry',\r\n    translateY: -1500,\r\n  },\r\n  {\r\n    name: 'mango',\r\n    translateY: -1600,\r\n  },\r\n  {\r\n    name: 'yellow-cherries',\r\n    translateY: -1700,\r\n  },\r\n];\r\n\r\nmodule.exports = fruits;\r\n","const MemoryFruit = require('./MemoryFruit');\r\nconst MemoryGameEngine = require('./MemoryGameEngine');\r\n\r\nconst fruitsData = require('../data/fruits');\r\n\r\nclass Memory {\r\n\tconstructor() {\r\n\t\tthis.fruits = [];\r\n    this.gameEngine = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Gestion du système de nouvelle partie.\r\n\t */\r\n\tnewGame() {\r\n\t\t// On vient faire une nouvelle instanciation de notre class MemoryGameData...\r\n\t\tthis.gameEngine = new MemoryGameEngine(this.fruits);\r\n\r\n\t\t// ... puis on rend transparent le tableau des scores...\r\n\t\tthis.gameEngine.HUD.vanishLeaderboard();\r\n\r\n\t\t// ... on masque la grille de jeu en mettant son opacité à 0...\r\n\t\tthis.gameEngine.HUD.vanishBoard();\r\n\r\n    setTimeout(() => {\r\n      // On crée de nouvelles cartes...\r\n      this.gameEngine.createCards();\r\n\r\n      // ...on met un `display: none;` sur le tableau des scores...\r\n      this.gameEngine.HUD.hideLeaderboard();\r\n\r\n      // ... puis on affiche la grille de jeu !\r\n      this.gameEngine.HUD.appearBoard();\r\n    }, 300);\r\n\t}\r\n\r\n\t/**\r\n\t * Récupère les différents fruits disponibles pour les stocker\r\n\t * dans l'instance actuelle de `Memory`, selon la class `MemoryFruit`.\r\n\t */\r\n\tretrieveFruits() {\r\n\t\t// On stocke tous les fruits disponibles dans le jeu et pour\r\n\t\t// chaque fruit, on instancie à chaque fois la classe `MemoryFruit`.\r\n\t\tfruitsData.forEach((fruit) => {\r\n      this.fruits.push(new MemoryFruit(fruit.name, fruit.translateY));\r\n    });\r\n\t}\r\n\r\n\t/**\r\n\t * Attache un écouteur d'événement sur le bouton \"Nouvelle partie\"\r\n\t * positionné dans le header de l'application, pour démarrer une nouvelle\r\n\t * partie au clic sur ce bouton.\r\n\t */\r\n\tattachEvent() {\r\n\t\t// On récupère le bouton...\r\n\t\tconst newGameHeaderButton = document.getElementById('new-game');\r\n\t\t// ... et on lui attache un écouteur d'événement sur les clics,\r\n\t\t// pour appeler la méthode `this.newGame`.\r\n\t\tnewGameHeaderButton.addEventListener('click', () => this.newGame());\r\n\t}\r\n\r\n\t/**\r\n\t * Initialise les pré-requis pour le memory.\r\n\t */\r\n\tinit() {\r\n\t\t// On prépare le bouton du header pour qu'il réagisse au clic\r\n\t\t// et qu'il permette de démarrer une nouvelle partie.\r\n\t\tthis.attachEvent();\r\n\r\n\t\t// On vient préparer notre liste de fruits.\r\n\t\tthis.retrieveFruits();\r\n\t}\r\n}\r\n\r\nmodule.exports = Memory;\r\n","class MemoryCard {\r\n\tconstructor(fruit) {\r\n\t\tthis.DOMElement = null;\r\n\t\tthis.found = false;\r\n\t\tthis.flipped = false;\r\n\t\tthis.fruit = fruit;\r\n\t}\r\n\r\n\tprepareCardDOM(template, board) {\r\n    // On commence par cloner le template déjà esistant...\r\n\t\tthis.DOMElement = document.importNode(template.content, true).querySelector('li');\r\n    \r\n    // ... on lui ajoute une variable CSS pour afficher\r\n    // le bon fruit parmi toute l'image...\r\n\t\tthis.DOMElement.style.setProperty('--translateY', `${this.fruit.translateY}px`);\r\n    \r\n    // ... et enfin, on l'ajoute dans le DOM !\r\n\t\tboard.append(this.DOMElement);\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryCard;\r\n","class MemoryFruit {\r\n\tconstructor(name, translateY) {\r\n\t\tthis.name = name;\r\n\t\tthis.translateY = translateY;\r\n\t\tthis.found = false;\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryFruit;\r\n","const MemoryCard = require('./MemoryCard');\r\nconst MemoryHUD = require('./MemoryHUD');\r\n\r\n// MemoryGameEngine est la class gérant tout ce qui est relatif\r\n// à la partie en cours.\r\nclass MemoryGameEngine {\r\n  constructor(fruits) {\r\n    this.fruitsPerGame = 14;\r\n\t\tthis.msBetweenFlip = 1000;\r\n\t\tthis.maxSecondsPerGame = 120;\r\n\t\tthis.fruits = fruits.shuffle().slice(0, this.fruitsPerGame);\r\n    this.cards = [];\r\n\t\tthis.HUD = new MemoryHUD();\r\n  }\r\n\r\n\t/**\r\n\t * Gestion de la création des cartes pour la nouvelle grille de jeu.\r\n\t */\r\n\tcreateCards() {\r\n\t\t// Ici, on crée un tableau avec deux fois les valeurs contenues\r\n\t\t// dans la propriété `this.fruits`.\r\n\t\t// Cela nous permet d'avoir deux fois chaque fruit !\r\n\t\t// Par contre, ils ne sont pas mélangés entre eux, on va donc\r\n\t\t// utiliser notre prototype sur les arrays pour mélanger\r\n\t\t// ce joli tableau pour éviter que les cartes soient toujours\r\n\t\t// aux mêmes positions sur la grille de jeu.\r\n\t\t[...this.fruits, ...this.fruits].shuffle().forEach(fruit => {\r\n      // Ici, on gère l'instanciation d'une nouvelle carte pour\r\n      // le fruit qui lui a été donné...\r\n\t\t\tconst newCard = new MemoryCard(fruit);\r\n\r\n      // ... puis on le configure pour qu'il corresponde au fruit choisi\r\n      // tout en prenant soin de l'insérer dans la grille de DOM...\r\n\t\t\tnewCard.prepareCardDOM(this.HUD.cardTemplate, this.HUD.boardContainer);\r\n\r\n      // ... et ici, on stocke notre objet dans la liste\r\n      // des cartes de la partie en cours.\r\n\t\t\tthis.cards.push(newCard);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryGameEngine;\r\n","class MemoryHUD {\r\n  constructor() {\r\n    // Templates\r\n    this.cardTemplate = document.getElementById('Card');\r\n\r\n    // Grille de jeu\r\n    this.boardContainer = document.getElementById('Board');\r\n\r\n    // Tableau des scores    \r\n\t\tthis.leaderboardContainer = document.getElementById('Leaderboard');\r\n  }\r\n\r\n\t/**\r\n\t * Masque le tableau des scores.\r\n\t */\r\n\thideLeaderboard() {\r\n\t\tthis.leaderboardContainer.classList.add('Leaderboard--hidden');\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime la classe CSS responsable d'une opacité à 0 sur\r\n\t * le tableau des scores.\r\n\t */\r\n   vanishLeaderboard() {\r\n\t\tthis.leaderboardContainer.classList.add('Leaderboard--vanish');\r\n\t}\r\n\r\n\t/**\r\n\t * Applique une classe CSS responsable d'une opacité à 0 sur\r\n\t * la grille de jeu.\r\n\t */\r\n\tvanishBoard() {\r\n\t\tthis.boardContainer.classList.add('Board--vanish');\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime la classe CSS responsable d'une opacité à 0 sur\r\n\t * la grille de jeu.\r\n\t */\r\n\tappearBoard() {\r\n\t\tthis.boardContainer.classList.remove('Board--vanish');\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryHUD;\r\n","// Basé sur l'algorithme de Fisher-Yates (mélange de Knuth)\r\n// => https://fr.wikipedia.org/wiki/M%C3%A9lange_de_Fisher-Yates\r\n\r\n/**\r\n * Crée un nouveau tableau mélangé, à partir du tableau sur lequel cette\r\n * méthode est utilisée.\r\n * @returns {[]}\r\n */\r\n Array.prototype.shuffle = function() {\r\n\t// On crée un nouveau tableau à partir du tableau déjà existant\r\n\tlet array = Array.from(this);\r\n\r\n\t// On défini l'index actuel sur la taille du nouveau tableau\r\n\tlet currentIndex = array.length;\r\n\r\n\t// On crée un index qui recevra un index au hasard à chaque passage dans la boucle\r\n\tlet randomIndex;\r\n\r\n\t// Tant qu'il reste des éléments à mélanger... (= position de l'index différent de 0)\r\n\twhile (currentIndex !== 0) {\r\n\t\t// ... on prend au hasard un élément restant...\r\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\r\n\t\t// ... on décrémente la position de notre index...\r\n\t\tcurrentIndex--;\r\n\r\n\t\t// ... puis on fait une inversion sur le contenu de l'index pris au hasard avec celui de notre index qui décrémente\r\n\t\t// à chaque passage dans la boucle\r\n\t\t[array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n\t}\r\n\r\n\t// Une fois que le mélange est terminé, on retourne le tableau.\r\n\treturn array;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('./arrayShuffle'); // notre méthode ajoutée sur tous les arrays\r\nconst Memory = require('./Memory');\r\n\r\n// Dès que le contenu du DOM est chargé, on exécute la méthode \"init\".\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\tconst memory = new Memory();\r\n\tmemory.init();\r\n});\r\n"],"names":["module","exports","name","translateY","MemoryFruit","MemoryGameEngine","fruitsData","constructor","this","fruits","gameEngine","newGame","HUD","vanishLeaderboard","vanishBoard","setTimeout","createCards","hideLeaderboard","appearBoard","retrieveFruits","forEach","fruit","push","attachEvent","document","getElementById","addEventListener","init","DOMElement","found","flipped","prepareCardDOM","template","board","importNode","content","querySelector","style","setProperty","append","MemoryCard","MemoryHUD","fruitsPerGame","msBetweenFlip","maxSecondsPerGame","shuffle","slice","cards","newCard","cardTemplate","boardContainer","leaderboardContainer","classList","add","remove","Array","prototype","randomIndex","array","from","currentIndex","length","Math","floor","random","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Memory"],"sourceRoot":""}