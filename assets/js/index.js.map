{"version":3,"file":"index.js","mappings":"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","sources":["webpack://memory-js/./src/data/fruits.js","webpack://memory-js/./src/js/Memory.js","webpack://memory-js/./src/js/MemoryCard.js","webpack://memory-js/./src/js/MemoryClock.js","webpack://memory-js/./src/js/MemoryFruit.js","webpack://memory-js/./src/js/MemoryGameEngine.js","webpack://memory-js/./src/js/MemoryHUD.js","webpack://memory-js/./src/js/arrayShuffle.js","webpack://memory-js/webpack/bootstrap","webpack://memory-js/./src/js/index.js"],"sourcesContent":["const fruits = [\r\n  {\r\n    name: 'red-apple',\r\n    translateY: 0,\r\n  },\r\n  {\r\n    name: 'bananas',\r\n    translateY: -100,\r\n  },\r\n  {\r\n    name: 'orange',\r\n    translateY: -200,\r\n  },\r\n  {\r\n    name: 'lime',\r\n    translateY: -300,\r\n  },\r\n  {\r\n    name: 'pomegranate',\r\n    translateY: -400,\r\n  },\r\n  {\r\n    name: 'apricot',\r\n    translateY: -500,\r\n  },\r\n  {\r\n    name: 'lemon',\r\n    translateY: -600,\r\n  },\r\n  {\r\n    name: 'strawberry',\r\n    translateY: -700,\r\n  },\r\n  {\r\n    name: 'green-apple',\r\n    translateY: -800,\r\n  },\r\n  {\r\n    name: 'peach',\r\n    translateY: -900,\r\n  },\r\n  {\r\n    name: 'grape',\r\n    translateY: -1000,\r\n  },\r\n  {\r\n    name: 'watermelon',\r\n    translateY: -1100,\r\n  },\r\n  {\r\n    name: 'plum',\r\n    translateY: -1200,\r\n  },\r\n  {\r\n    name: 'pear',\r\n    translateY: -1300,\r\n  },\r\n  {\r\n    name: 'red-cherries',\r\n    translateY: -1400,\r\n  },\r\n  {\r\n    name: 'raspberry',\r\n    translateY: -1500,\r\n  },\r\n  {\r\n    name: 'mango',\r\n    translateY: -1600,\r\n  },\r\n  {\r\n    name: 'yellow-cherries',\r\n    translateY: -1700,\r\n  },\r\n];\r\n\r\nmodule.exports = fruits;\r\n","const MemoryFruit = require('./MemoryFruit');\r\nconst MemoryGameEngine = require('./MemoryGameEngine');\r\n\r\nconst fruitsData = require('../data/fruits');\r\n\r\nclass Memory {\r\n\tconstructor() {\r\n\t\tthis.fruits = [];\r\n    this.gameEngine = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Gestion du système de nouvelle partie.\r\n\t */\r\n\tnewGame() {\r\n\t\t// Si une horloge interne existe déjà...\r\n\t\tif (this.gameEngine) {\r\n\t\t\t// ... on met un terme à l'horloge interne du jeu.\r\n\t\t\tthis.gameEngine.clock.end();\r\n\t\t}\r\n\r\n\t\t// On vient faire une nouvelle instanciation de notre class MemoryGameData...\r\n\t\tthis.gameEngine = new MemoryGameEngine(this.fruits, () => this.newGame());\r\n\r\n\t\t// ... puis on rend transparent le tableau des scores...\r\n\t\tthis.gameEngine.HUD.vanishLeaderboard();\r\n\r\n\t\t// ... on masque la grille de jeu en mettant son opacité à 0...\r\n\t\tthis.gameEngine.HUD.vanishBoard();\r\n\r\n    setTimeout(() => {\r\n\t\t\t// ... on réinitialise la grille de jeu.\r\n\t\t\tthis.gameEngine.removeCards();\r\n\t\t\t\r\n      // On crée de nouvelles cartes...\r\n      this.gameEngine.createCards();\r\n\r\n      // ...on met un `display: none;` sur le tableau des scores...\r\n      this.gameEngine.HUD.hideLeaderboard();\r\n\r\n      // ... puis on affiche la grille de jeu !\r\n      this.gameEngine.HUD.appearBoard();\r\n    }, 300);\r\n\t}\r\n\r\n\t/**\r\n\t * Récupère les différents fruits disponibles pour les stocker\r\n\t * dans l'instance actuelle de `Memory`, selon la class `MemoryFruit`.\r\n\t */\r\n\tretrieveFruits() {\r\n\t\t// On stocke tous les fruits disponibles dans le jeu et pour\r\n\t\t// chaque fruit, on instancie à chaque fois la classe `MemoryFruit`.\r\n\t\tfruitsData.forEach((fruit) => {\r\n      this.fruits.push(new MemoryFruit(fruit.name, fruit.translateY));\r\n    });\r\n\t}\r\n\r\n\t/**\r\n\t * Attache un écouteur d'événement sur le bouton \"Nouvelle partie\"\r\n\t * positionné dans le header de l'application, pour démarrer une nouvelle\r\n\t * partie au clic sur ce bouton.\r\n\t */\r\n\tattachEvent() {\r\n\t\t// On récupère le bouton...\r\n\t\tconst newGameHeaderButton = document.getElementById('new-game');\r\n\t\t// ... et on lui attache un écouteur d'événement sur les clics,\r\n\t\t// pour appeler la méthode `this.newGame`.\r\n\t\tnewGameHeaderButton.addEventListener('click', () => this.newGame());\r\n\t}\r\n\r\n\t/**\r\n\t * Initialise les pré-requis pour le memory.\r\n\t */\r\n\tinit() {\r\n\t\t// On prépare le bouton du header pour qu'il réagisse au clic\r\n\t\t// et qu'il permette de démarrer une nouvelle partie.\r\n\t\tthis.attachEvent();\r\n\r\n\t\t// On vient préparer notre liste de fruits.\r\n\t\tthis.retrieveFruits();\r\n\t}\r\n}\r\n\r\nmodule.exports = Memory;\r\n","class MemoryCard {\r\n\tconstructor(fruit, flipCard) {\r\n\t\tthis.DOMElement = null;\r\n\t\tthis.found = false;\r\n\t\tthis.flipped = false;\r\n\t\tthis.fruit = fruit;\r\n\t\t// Comme depuis un objet `MemoryCard` on ne\r\n\t\t// peut pas directement appeler la méthode\r\n\t\t// `flipCard` de la class `MemoryGameEngine`,\r\n\t\t// on stocke un callback qu'on attachera lorsque\r\n\t\t// nous définirons le DOM de la carte.\r\n\t\tthis.flipCard = flipCard;\r\n\t}\r\n\r\n\tprepareCardDOM(template, board) {\r\n    // On commence par cloner le template déjà esistant...\r\n\t\tthis.DOMElement = document.importNode(template.content, true).querySelector('li');\r\n    \r\n    // ... on lui ajoute une variable CSS pour afficher\r\n    // le bon fruit parmi toute l'image...\r\n\t\tthis.DOMElement.style.setProperty('--translateY', `${this.fruit.translateY}px`);\r\n\r\n\t\t// ... on rajoute un eventListener pour pouvoir\r\n\t\t// retourner la carte au clic...\r\n\t\tthis.DOMElement.addEventListener('click', () => this.flipCard(this));\r\n    \r\n    // ... et enfin, on l'ajoute dans le DOM !\r\n\t\tboard.append(this.DOMElement);\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryCard;\r\n","class MemoryClock {\r\n\tconstructor() {\r\n\t\tthis.id = null;\r\n    this.elapsedTime = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime l'intervalle de l'horloge interne du jeu.\r\n\t */\r\n\tend() {\r\n\t\tclearInterval(this.id);\r\n\t}\r\n\r\n\t/**\r\n\t * Démarre une nouvelle horloge interne pour le jeu,\r\n\t * appelant le callback fourni durant\r\n   * l'appel de cette méthode.\r\n\t * @param callback\r\n\t */\r\n\tstart(callback) {\r\n\t\tthis.id = setInterval(() => callback(), 1000);\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryClock;\r\n","class MemoryFruit {\r\n\tconstructor(name, translateY) {\r\n\t\tthis.name = name;\r\n\t\tthis.translateY = translateY;\r\n\t\tthis.found = false;\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryFruit;\r\n","const MemoryCard = require('./MemoryCard');\r\nconst MemoryClock = require('./MemoryClock');\r\nconst MemoryHUD = require('./MemoryHUD');\r\n\r\n// MemoryGameEngine est la class gérant tout ce qui est relatif\r\n// à la partie en cours.\r\nclass MemoryGameEngine {\r\n  constructor(fruits, newGameCallback) {\r\n    this.fruitsPerGame = 2;\r\n\t\tthis.msBetweenFlip = 1000;\r\n\t\tthis.maxSecondsPerGame = 2;\r\n\t\tthis.fruits = fruits.shuffle().slice(0, this.fruitsPerGame);\r\n    this.cards = [];\r\n\t\tthis.HUD = new MemoryHUD();\r\n    this.flippedCards = 0;\r\n    this.canFlip = true;\r\n    this.finishedAt = null;\r\n    this.clock = new MemoryClock();\r\n\t\t// Puisque nous sommes dans une instance de `MemoryGameEngine`,\r\n\t\t// nous ne pouvons pas faire `this.newGame()` pour démarrer\r\n\t\t// une nouvelle partie car cette méthode est propre à la class `Memory`.\r\n\t\t// Cependant on peut stocker cette méthode dans notre instance\r\n\t\t// pour pouvoir l'utiliser quand on le souhaite !\r\n\t\tthis.newGameCallback = newGameCallback;\r\n  }\r\n\r\n\t/**\r\n\t * Actualise l'interface du jeu.\r\n\t */\r\n  refreshHUD() {\r\n\t\tthis.HUD.setFlippedCards(this.flippedCards);\r\n\t\tthis.HUD.setElapsedTime(this.clock.elapsedTime, this.maxSecondsPerGame);\r\n  }\r\n\r\n\t/**\r\n\t * Soumet les informations de la partie et du formulaire\r\n\t * à notre serveur pour stocker les informations.\r\n\t * @param username\r\n\t */\r\n\tsubmitScore(username) {\r\n\t\t// todo\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime la fenêtre modale et supprime les cartes de la grille de jeu\r\n\t * pour laisser apparaître le tableau des scores.\r\n\t */\r\n\tdisplayLeaderboardHandler() {\r\n\t\t// todo\r\n\t}\r\n\r\n\t/**\r\n\t * Gestion des méthodes pour l'animation de disparition de la\r\n\t * fenêtre modale de fin de partie et initialise une nouvelle partie.\r\n\t */\r\n\tnewGameHandler() {\r\n\t\t// On fait disparaître doucement la fenêtre modale\r\n\t\tthis.HUD.vanishResults();\r\n\r\n\t\t// Dans 750ms...\r\n\t\tsetTimeout(() => {\r\n\t\t\t// ... on force l'état \"caché\" sur toutes les cartes de l'ancienne partie.\r\n\t\t\tthis.HUD.closeAllCards();\r\n\r\n\t\t\t// ... puis dans 250ms...\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\t// ... on enlève le flou sur la grille de jeu...\r\n\t\t\t\tthis.HUD.removeBlurBoard();\r\n\r\n\t\t\t\t// ... et enfin (promis c'est le dernier !) après 300ms...\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t// ... on supprime du DOM la fenêtre modale...\r\n\t\t\t\t\tthis.HUD.hideResults();\r\n\t\t\t\t\t// ... et on démarre une nouvelle partie.\r\n\t\t\t\t\tthis.newGameCallback();\r\n\t\t\t\t}, 300);\r\n\t\t\t}, 250);\r\n\t\t}, 750);\r\n\r\n\t\t// Ces trois `setTimeout` imbriqués peuvent heureusement être décomposés,\r\n\t\t// c'est-à-dire ne pas être imbriqués à condition d'additionner les temps\r\n\t\t// d'attente de chaque `setTimeout` !\r\n\t\t//\r\n\t\t// Exemple :\r\n\t\t// 1. `setTimeout` imbriqués (250ms, puis 250ms)\r\n\t\t// \tsetTimeout(() => {\r\n\t\t// \t\t/* ... */\r\n\t\t// \t\tsetTimeout(() => {/* ... */}, 250);\r\n\t\t// \t}, 250);\r\n\t\t//\r\n\t\t// 2. `setTimeout` indépendants (250ms, puis 250ms + 250ms (500ms))\r\n\t\t// \tsetTimeout(() => {/* ... */}, 250);\r\n\t\t// \tsetTimeout(() => {/* ... */}, 500);\r\n\t}\r\n\r\n\t/**\r\n\t * Gestion de la fin de partie.\r\n\t */\r\n\tgameFinished() {\r\n\t\t// On stocke la date et heure de la fin de la partie.\r\n\t\tthis.finishedAt = new Date();\r\n\t\t// On floute l'arrière plan.\r\n\t\tthis.HUD.blurBoard();\r\n    // On stoppe l'horloge interne du jeu.\r\n    this.clock.end();\r\n\t\t// On bloque la possibilité de retourner de nouvelles cartes.\r\n\t\tthis.canFlip = false;\r\n\t\t// On affiche l'écran de fin de jeu.\r\n\t\tthis.HUD.displayResults(\r\n\t\t\tthis.flippedCards,\r\n\t\t\tthis.fruits.filter((fruit) => fruit.found).length,\r\n\t\t\tthis.fruitsPerGame,\r\n\t\t\tthis.clock.elapsedTime,\r\n\t\t\t() => this.newGameHandler(),\r\n\t\t\t(username) => this.submitScore(username),\r\n\t\t\t() => this.displayLeaderboardHandler()\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Actionne la fin de partie si toutes les paires ont été trouvées.\r\n\t */\r\n\tcheckFoundPairs() {\r\n\t\t// Si le nombre de paires trouvées (fruits trouvés)\r\n\t\t// est égal au nombre de fruits dans le jeu,\r\n\t\t// on enclenche la fin de la partie.\r\n\t\tif (this.fruits.filter((fruit) => fruit.found).length === this.fruitsPerGame) {\r\n\t\t\tthis.gameFinished();\r\n\t\t}\r\n\t}\r\n  \r\n  /**\r\n\t * Gestion des cartes actuellement retournées (hors cartes trouvées).\r\n   * @param {[]}\r\n   */\r\n\tcheckVisibleCards(cards) {\r\n\t\t// On modifie la valeur de la propriété \"canFlip\" à false pour\r\n\t\t// pouvoir interdire le retournement d'autres cartes.\r\n\t\tthis.canFlip = false;\r\n\r\n    // Si les deux cartes ont le même fruit (apple, bananas etc)...\r\n\t\tif (cards[0].fruit.name === cards[1].fruit.name) {\r\n\t\t\t// ... alors on défini ces cartes comme \"trouvées\" et on enlève\r\n\t\t\t// l'état de carte retournée.\r\n\r\n\t\t\t// Pour chacune de ces deux cartes...\r\n\t\t\tcards.forEach(card => {\r\n\t\t\t\t// ... on ajoute la classe CSS `Card--found`...\r\n\t\t\t\tcard.DOMElement.classList.add('Card--found');\r\n\t\t\t\t// ... on indique la carte comme déjà trouvée...\r\n\t\t\t\tcard.found = true;\r\n\t\t\t\t// ... et on en fait de même pour le fruit.\r\n\t\t\t\tcard.fruit.found = true;\r\n\t\t\t});\r\n\r\n\t\t\t// ... puis dans 300ms, on retire la classe CSS `Card--visible` puisque cette\r\n\t\t\t// carte fait partie du paire trouvée.\r\n\t\t\t//\r\n\t\t\t// \"300ms ? Mais pourquoi ?\"\r\n\t\t\t// Nous avons une animation, lorsqu'une carte voit son état de carte retournée altéré, qui dure 300ms.\r\n\t\t\t// Si nous faisons les deux changements de classes CSS en même temps,\r\n\t\t\t// l'animation ne pourra pas se faire correctement.\r\n\t\t\t// Il n'est question que de visuel, rien d'obligatoire, mais n'oublions pas que\r\n\t\t\t// l'UI reste importante pour les utilisateurs, du moment que l'UX est bonne !\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tcards.forEach((card) => card.DOMElement.classList.remove('Card--visible'));\r\n\t\t\t}, 300);\r\n\r\n\t\t\t// Et on autorise le fait de pouvoir retourner des cartes à nouveau.\r\n\t\t\t// Petit rappel : la ligne ci-dessous prend effet avant que la classe CSS soit supprimée dans\r\n\t\t\t// le `setTimeout`, pas besoin d'attendre 300ms pour retourner de nouvelles cartes !\r\n\t\t\tthis.canFlip = true;\r\n\r\n\t\t\t// On vérifie si toutes les paires ont été trouvées pour éventuellement\r\n\t\t\t// déclencher la fin de la partie.\r\n\t\t\tthis.checkFoundPairs();\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// ... sinon, on retourne simplement les deux cartes\r\n\t\t\t// après un court délai défini sur `this.msBetweenFlip`.\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tcards.forEach((card) => {\r\n\t\t\t\t\tcard.DOMElement.classList.remove('Card--visible');\r\n\t\t\t\t\t// On va également autoriser de nouveau le retournement de cette\r\n\t\t\t\t\t// même carte, puisque sa jumelle n'a pas été trouvée.\r\n\t\t\t\t\tcard.canFlip = true;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// On profite d'avoir retourné ces cartes pour également autoriser\r\n\t\t\t\t// de nouveau le retournement des cartes, sans quoi le jeu se retrouverait bloqué.\r\n\t\t\t\tthis.canFlip = true;\r\n\t\t\t}, this.msBetweenFlip);\r\n\t\t}\r\n  }\r\n\r\n\t/**\r\n\t * Vérifie si l'utilisateur est à court de temps pour déclencher la fin\r\n\t * de la partie, ou bien laisser l'utilisateur continuer de jouer\r\n\t * s'il lui reste du temps.\r\n\t */\r\n\tcheckElapsedTime() {\r\n\t\tif (this.clock.elapsedTime >= this.maxSecondsPerGame) this.gameFinished();\r\n\t}\r\n\r\n\t/**\r\n\t * Incrémente le temps écoulé de 1 à chaque appel\r\n\t * puis rafraichi l'interface du jeu.\r\n\t */\r\n\tincrementElapsedTime() {\r\n\t\t// On rajoute une seconde au timer...\r\n\t\tthis.clock.elapsedTime += 1;\r\n\t\t// ... puis on actualise l'interface du jeu.\r\n\t\tthis.refreshHUD();\r\n\r\n\t\t// Puisqu'il y a une limite de temps sur la partie,\r\n\t\t// on vérifie si le joueur ne l'a pas dépassée.\r\n\t\tthis.checkElapsedTime();\r\n\t}\r\n  \r\n  /**\r\n\t * Gestion du retournement des cartes vers face visible.\r\n\t * @param {MemoryCard}\r\n\t */\r\n\tflipCard(currentCard) {\r\n    // Si le joueur ne peut pas retourner de cartes pour le moment,\r\n    // on sort de la méthode `flipCard`.\r\n    if (!this.canFlip) return;\r\n\r\n    // Si l'horloge de jeu n'a pas encore démarré,\r\n    // on la démarre de ce pas !\r\n    // Elle n'est pas active avant de cliquer pour\r\n    // la première fois sur une carte.\r\n    if (null === this.clock.id) this.clock.start(() => this.incrementElapsedTime());\r\n\r\n\t\t// On indique la carte cliquée comme retournée avec une classe CSS (face visible)...\r\n\t\tcurrentCard.DOMElement.classList.add('Card--visible');\r\n\t\t// ... on donne à notre objet le status retourné...\r\n\t\tcurrentCard.flipped = true;\r\n    // ... on incrémente le nombre total de cartes retournées...\r\n    this.flippedCards += 1;\r\n    // ... puis on rafraichi l'HUD !\r\n    this.refreshHUD();\r\n\r\n\t\t// On récupère toutes les cartes faces visibles (hors cartes trouvées).\r\n\t\t// Puisqu'on bloque le nombre de cartes retournées à deux lors de la\r\n\t\t// vérification des cartes (this.checkVisibleCards()),\r\n\t\t// `visibleCards` aura soit une carte, soit deux cartes, mais jamais plus !\r\n    const visibleCards = this.cards.filter((card) => card.flipped);\r\n\r\n    // Si exactement deux cartes sont actuellement retournées...\r\n\t\tif (2 === visibleCards.length) {\r\n\t\t\t// ... alors on vérifie qu'elles sont identiques...\r\n\t\t\tthis.checkVisibleCards(visibleCards);\r\n\t\t\t// ... puis on retire le status \"retourné\" sur ces deux cartes.\r\n\t\t\tvisibleCards.forEach((card) => card.flipped = false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime les cartes du DOM et du système de l'application.\r\n\t */\r\n\tremoveCards() {\r\n\t\t// On supprime les cartes de la grille de jeu...\r\n\t\tthis.HUD.removeCards();\r\n\t\t// ... puis on vide notre propriété `this.cards`.\r\n\t\tthis.cards = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Gestion de la création des cartes pour la nouvelle grille de jeu.\r\n\t */\r\n\tcreateCards() {\r\n\t\t// Ici, on crée un tableau avec deux fois les valeurs contenues\r\n\t\t// dans la propriété `this.fruits`.\r\n\t\t// Cela nous permet d'avoir deux fois chaque fruit !\r\n\t\t// Par contre, ils ne sont pas mélangés entre eux, on va donc\r\n\t\t// utiliser notre prototype sur les arrays pour mélanger\r\n\t\t// ce joli tableau pour éviter que les cartes soient toujours\r\n\t\t// aux mêmes positions sur la grille de jeu.\r\n\t\t[...this.fruits, ...this.fruits].shuffle().forEach(fruit => {\r\n      // Ici, on gère l'instanciation d'une nouvelle carte pour\r\n      // le fruit qui lui a été donné et on ajoute un eventListener...\r\n\t\t\tconst newCard = new MemoryCard(fruit, (card) => this.flipCard(card));\r\n\r\n      // ... puis on le configure pour qu'il corresponde au fruit choisi\r\n      // tout en prenant soin de l'insérer dans la grille de DOM...\r\n\t\t\tnewCard.prepareCardDOM(this.HUD.cardTemplate, this.HUD.boardContainer);\r\n\r\n      // ... et ici, on stocke notre objet dans la liste\r\n      // des cartes de la partie en cours.\r\n\t\t\tthis.cards.push(newCard);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryGameEngine;\r\n","class MemoryHUD {\r\n  constructor() {\r\n    // Templates\r\n    this.cardTemplate = document.getElementById('Card');\r\n\t\tthis.gameResultsTemplate = document.getElementById('GameResults');\r\n\r\n\t\t// Résultats de fin de partie\r\n\t\tthis.gameResultsContainer = null;\r\n\r\n    // Grille de jeu\r\n    this.boardContainer = document.getElementById('Board');\r\n\r\n    // Tableau des scores    \r\n\t\tthis.leaderboardContainer = document.getElementById('Leaderboard');\r\n\r\n    // Cartes retournées\r\n    this.flippedCardsSpan = document.querySelector(':scope #moves span');\r\n\r\n    // Temps écoulé\r\n    this.elapsedTimeSpan = document.querySelector(':scope #elapsedTime span');\r\n\t\tthis.elapsedTimeProgressBar = document.querySelector(':scope #elapsedTime .ProgressBar');\r\n  }\r\n\r\n\t/**\r\n\t * Retourne un pourcentage (sous forme de chaîne de caractères)\r\n   * correspondant au temps écoulé.\r\n\t * \r\n   * Exemple : 46%\r\n\t *\r\n\t * @returns {string}\r\n\t */\r\n\tformatElapsedTimeIntoPercent(elapsedTime, maxSecondsPerGame) {\r\n\t\treturn `${(elapsedTime / maxSecondsPerGame) * 100}%`;\r\n\t}\r\n\r\n\t/**\r\n\t * Retourne le temps écoulé sous le format \"M:SS\".\r\n   * \r\n\t * Exemple : 4:06\r\n\t *\r\n\t * @returns {string}\r\n\t */\r\n\tformatElapsedTime(elapsedTime) {\r\n\t\tconst seconds = (elapsedTime % 60 < 10) ? `0${elapsedTime % 60}` : elapsedTime % 60;\r\n\t\tconst minutes = Math.floor(elapsedTime / 60);\r\n\r\n\t\treturn `${minutes}:${seconds}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Actualise les données relatives au temps écoulé sur le HUD.\r\n\t *\r\n\t * @param elapsedTime\r\n\t */\r\n\tsetElapsedTime(elapsedTime, maxSecondsPerGame) {\r\n\t\tthis.elapsedTimeSpan.innerHTML = this.formatElapsedTime(elapsedTime);\r\n    this.elapsedTimeProgressBar.style.setProperty('--width', this.formatElapsedTimeIntoPercent(elapsedTime, maxSecondsPerGame));\r\n\t}\r\n\r\n\t/**\r\n\t * Actualise le nombre de cartes retournées au court de la partie en cours.\r\n\t *\r\n\t * @param flippedCards\r\n\t */\r\n\tsetFlippedCards(flippedCards) {\r\n\t\tthis.flippedCardsSpan.innerHTML = flippedCards;\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime du DOM le paragraphe et le formulaire de soumission de score\r\n\t * de la fenêtre modale des résultats.\r\n\t */\r\n\thideResultsForm() {\r\n\t\tthis.gameResultsContainer.querySelector('p.onlyIfWon').outerHTML = '';\r\n\t\tthis.gameResultsContainer.querySelector('form').outerHTML = '';\r\n\t}\r\n\r\n\t/**\r\n\t * Anime les cartes de la précédente partie au travers des classes CSS\r\n\t * dédiées aux états des cartes.\r\n\t */\r\n\tcloseAllCards() {\r\n\t\t// On récupère toutes les cartes sur la grille de jeu...\r\n\t\tthis.boardContainer.querySelectorAll('.Card').forEach((card) => {\r\n\t\t\t// ... et à chacune, on rajoute la classe CSS `Card--visible`.\r\n\t\t\tcard.classList.add('Card--visible');\r\n\r\n\t\t\t// 300ms après le rajout de la classe CSS `Card--visible`...\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\t// ... on supprime les classes CSS `Card--found` et `Card--visible`...\r\n\t\t\t\tcard.classList.remove('Card--found', 'Card--visible');\r\n\t\t\t\t// ... puis on rajoute la classe CSS `Card--hidden`.\r\n\t\t\t\tcard.classList.add('Card--hidden');\r\n\t\t\t}, 300);\r\n\t\t});\r\n\t}\r\n\r\n  hideResults() {\r\n    this.gameResultsContainer.outerHTML = '';\r\n  }\r\n\r\n\t/**\r\n\t * Affiche et paramètre la fenêtre modale des résultats de fin de partie.\r\n\t * @param flippedCards\r\n\t * @param foundPairs\r\n\t * @param fruitsPerGame\r\n\t * @param elapsedTime\r\n\t * @param newGameHandler\r\n\t * @param submitScore\r\n\t * @param displayLeaderboardHandler\r\n\t */\r\n  displayResults(\r\n\t\tflippedCards,\r\n\t\tfoundPairs,\r\n\t\tfruitsPerGame,\r\n\t\telapsedTime,\r\n\t\tnewGameHandler,\r\n\t\tsubmitScore,\r\n\t\tdisplayLeaderboardHandler\r\n  ) {\r\n\t\t// On clone le template de l'écran de fin de partie...\r\n\t\tthis.gameResultsContainer = document.importNode(this.gameResultsTemplate.content, true).querySelector('section');\r\n\r\n\t\t// ... puis on modifie les données affichées par les données actuelles.\r\n\t\tthis.gameResultsContainer.querySelector('#GameResultsMoves').innerHTML = flippedCards;\r\n\t\tthis.gameResultsContainer.querySelector('#GameResultsFound').innerHTML = foundPairs;\r\n\t\tthis.gameResultsContainer.querySelector('#GameResultsPairs').innerHTML = fruitsPerGame;\r\n\t\tthis.gameResultsContainer.querySelector('#GameResultsElapsedTime').innerHTML = this.formatElapsedTime(elapsedTime);\r\n\r\n\t\t// Si une ou plusieurs paires n'ont pas été trouvées durant la partie...\r\n\t\tif (foundPairs !== fruitsPerGame) {\r\n\t\t\t// ... alors on supprime le paragraphe proposant à l'utilisateur\r\n\t\t\t// d'envoyer son score, ainsi que le formulaire.\r\n\t\t\tthis.hideResultsForm();\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Si toutes les paires ont été trouvées, on ajoute un écouteur d'événement `submit` sur le formulaire...\r\n\t\t\tthis.gameResultsContainer.querySelector('form').addEventListener('submit', (event) => {\r\n\t\t\t\t// ... qui bloquera le fonctionnement par défaut du `submit` sur ce formulaire...\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\t// ... et appellera la méthode de soumission des résultats, par le biais du callback `submitScore`.\r\n\t\t\t\tsubmitScore(document.getElementById('username').value);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// On ajoute un écouteur d'événement `click` sur le bouton de la fenêtre modale,\r\n\t\t// qui actionnera une méthode propre au démarrage d'une nouvelle partie lorsque\r\n\t\t// ce bouton sera cliqué (pour masquer la fenêtre modale et gérer d'autres animations).\r\n\t\tthis.gameResultsContainer\r\n\t\t\t.querySelector('button[data-action=\"new-game\"]')\r\n\t\t\t.addEventListener('click', () => newGameHandler());\r\n\r\n    // On fait exactement la même chose pour le bouton qui est prévu pour afficher\r\n    // le tableau des scores\r\n    this.gameResultsContainer\r\n      .querySelector('button[data-action=\"leaderboard\"]')\r\n      .addEventListener('click', () => displayLeaderboardHandler());\r\n\r\n\t\t// Puis au bout d'une seconde...\r\n\t\tsetTimeout(() => {\r\n\t\t\t// ... on rétabli l'opacité de la fenêtre modale grâce à la classe CSS `GameResults--visible`.\r\n\t\t\tthis.gameResultsContainer.classList.add('GameResults--visible');\r\n\t\t}, 1000);\r\n\r\n    // On insert l'écran des résultats dans le DOM.\r\n\t\tdocument.body.append(this.gameResultsContainer);\r\n  }\r\n\r\n\t/**\r\n\t * Fait disparaître la fenêtre modale de fin de partie.\r\n\t */\r\n\tvanishResults() {\r\n\t\tthis.gameResultsContainer.classList.remove('GameResults--visible');\r\n\t}\r\n\r\n\t/**\r\n\t * Masque le tableau des scores.\r\n\t */\r\n\thideLeaderboard() {\r\n\t\tthis.leaderboardContainer.classList.add('Leaderboard--hidden');\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime la classe CSS responsable d'une opacité à 0 sur\r\n\t * le tableau des scores.\r\n\t */\r\n   vanishLeaderboard() {\r\n\t\tthis.leaderboardContainer.classList.add('Leaderboard--vanish');\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime le contenu de la grille de jeu.\r\n\t */\r\n\tremoveCards() {\r\n\t\tthis.boardContainer.innerHTML = '';\r\n\t}\r\n\r\n\t/**\r\n\t * Floute la grille de jeu.\r\n\t */\r\n\tblurBoard() {\r\n\t\tthis.boardContainer.classList.add('Board--blurred');\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime le flou sur la grille de jeu.\r\n\t */\r\n\tremoveBlurBoard() {\r\n\t\tthis.boardContainer.classList.remove('Board--blurred');\r\n\t}\r\n\r\n\t/**\r\n\t * Applique une classe CSS responsable d'une opacité à 0 sur\r\n\t * la grille de jeu.\r\n\t */\r\n\tvanishBoard() {\r\n\t\tthis.boardContainer.classList.add('Board--vanish');\r\n\t}\r\n\r\n\t/**\r\n\t * Supprime la classe CSS responsable d'une opacité à 0 sur\r\n\t * la grille de jeu.\r\n\t */\r\n\tappearBoard() {\r\n\t\tthis.boardContainer.classList.remove('Board--vanish');\r\n\t}\r\n}\r\n\r\nmodule.exports = MemoryHUD;\r\n","// Basé sur l'algorithme de Fisher-Yates (mélange de Knuth)\r\n// => https://fr.wikipedia.org/wiki/M%C3%A9lange_de_Fisher-Yates\r\n\r\n/**\r\n * Crée un nouveau tableau mélangé, à partir du tableau sur lequel cette\r\n * méthode est utilisée.\r\n * @returns {[]}\r\n */\r\n Array.prototype.shuffle = function() {\r\n\t// On crée un nouveau tableau à partir du tableau déjà existant\r\n\tlet array = Array.from(this);\r\n\r\n\t// On défini l'index actuel sur la taille du nouveau tableau\r\n\tlet currentIndex = array.length;\r\n\r\n\t// On crée un index qui recevra un index au hasard à chaque passage dans la boucle\r\n\tlet randomIndex;\r\n\r\n\t// Tant qu'il reste des éléments à mélanger... (= position de l'index différent de 0)\r\n\twhile (currentIndex !== 0) {\r\n\t\t// ... on prend au hasard un élément restant...\r\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\r\n\t\t// ... on décrémente la position de notre index...\r\n\t\tcurrentIndex--;\r\n\r\n\t\t// ... puis on fait une inversion sur le contenu de l'index pris au hasard avec celui de notre index qui décrémente\r\n\t\t// à chaque passage dans la boucle\r\n\t\t[array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n\t}\r\n\r\n\t// Une fois que le mélange est terminé, on retourne le tableau.\r\n\treturn array;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('./arrayShuffle'); // notre méthode ajoutée sur tous les arrays\r\nconst Memory = require('./Memory');\r\n\r\n// Dès que le contenu du DOM est chargé, on exécute la méthode \"init\".\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\tconst memory = new Memory();\r\n\tmemory.init();\r\n});\r\n"],"names":["module","exports","name","translateY","MemoryFruit","MemoryGameEngine","fruitsData","constructor","this","fruits","gameEngine","newGame","clock","end","HUD","vanishLeaderboard","vanishBoard","setTimeout","removeCards","createCards","hideLeaderboard","appearBoard","retrieveFruits","forEach","fruit","push","attachEvent","document","getElementById","addEventListener","init","flipCard","DOMElement","found","flipped","prepareCardDOM","template","board","importNode","content","querySelector","style","setProperty","append","id","elapsedTime","clearInterval","start","callback","setInterval","MemoryCard","MemoryClock","MemoryHUD","newGameCallback","fruitsPerGame","msBetweenFlip","maxSecondsPerGame","shuffle","slice","cards","flippedCards","canFlip","finishedAt","refreshHUD","setFlippedCards","setElapsedTime","submitScore","username","displayLeaderboardHandler","newGameHandler","vanishResults","closeAllCards","removeBlurBoard","hideResults","gameFinished","Date","blurBoard","displayResults","filter","length","checkFoundPairs","checkVisibleCards","card","classList","add","remove","checkElapsedTime","incrementElapsedTime","currentCard","visibleCards","newCard","cardTemplate","boardContainer","gameResultsTemplate","gameResultsContainer","leaderboardContainer","flippedCardsSpan","elapsedTimeSpan","elapsedTimeProgressBar","formatElapsedTimeIntoPercent","formatElapsedTime","seconds","Math","floor","innerHTML","hideResultsForm","outerHTML","querySelectorAll","foundPairs","event","preventDefault","value","body","Array","prototype","randomIndex","array","from","currentIndex","random","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Memory"],"sourceRoot":""}